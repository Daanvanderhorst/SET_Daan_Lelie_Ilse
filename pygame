from comparison import *
from classes import *
import pygame
import random

pygame.init()

KAART_BREEDTE = 100
KAART_LENGTE = 150 
KAART_AFSTAND = 20 #Afstanden tussen kaarten (om ze netjes te positioneren)
score_player = 0
score_computer = 0
BORD_START_POSITIE = (50, 50) # Startpositie van het spelbord (linkerbovenhoek van het eerste kaartvak)
kaarten_op_bord = [] #Variabele voor kaarten die op het bord liggen (lege lijst, wordt later gevuld)
geselecteerde_kaarten = [] #Variabele om geselecteerde kaarten bij te houden (voor een mogelijke set)
MAX_KAARTEN_OP_BORD = 12 #Maximaal aantal kaarten op het bord
twelvecards = []
card_images = []
selected_cards = []
q = True
button = {}
boardcards = []  # Lijst voor kaarten met hun Rects en afbeeldingen
start_time = pygame.time.get_ticks()
timer_duration = 30000  # 30 seconden in milliseconden
timer_running = True
current_time = pygame.time.get_ticks()
lastset = [0, 4, 8]
score_rect = pygame.Rect(0, 0, 350, 150)
lijst = [*range(81)]
random.shuffle(lijst)
lastfail = [-1, -1, -1]
wrong_timer = 0
eindtijd = 0
eind = False

WINDOW_SIZE = [1250, 700] # Afmeting van spelscherm instellen (in pixels: [breedte,hoogte])

# -------- FUNCTIE DEFINITIES --------

# Fonts
font = pygame.font.Font(None, 50)
timer_font = pygame.font.Font(None, 40)  # Font voor de timer

# Timer variabelen


def replace_found_set(set):#from high to low
   if len(lijst)>0:
      set.sort()
      for i in range(2, -1, -1):
         boardcards[set[i]] = Card(lijst.pop(),  boardcards[set[i]].index, boardcards[set[i]].rect)
      global start_time
      start_time = pygame.time.get_ticks()
      selected_cards.clear()
      screen.fill("pink")
      checksets()
   else: 
      global eind
      eind = True
      global eindtijd
      eindtijd = int(pygame.time.get_ticks()/1000)

button_layout_rect = pygame.Rect(0, 0, 100, 20)
klok_layout_rect = pygame.Rect(WINDOW_SIZE[0] - 140, 20, 150, 150)
button_layout_rect.bottomright = (30, 20)




#https://pygame-gui.readthedocs.io/en/latest/layout_guide.html

def makedeck(): #12 kaarten op het scherm bouwen
   screen.fill("pink")
   selected_cards.clear()
   boardcards.clear()
  
   start_x = (1250 - (4 * KAART_BREEDTE + 3 * KAART_AFSTAND)) // 2  # Centreer raster horizontaal
   start_y = (700 - (3 * KAART_LENGTE + 2 * KAART_AFSTAND)) // 2  # Centreer raster verticaal
   
   for row in range(3):  # 3 rijen
      for col in range(4):  # 4 kolommen
         x = start_x + col * (KAART_BREEDTE + KAART_AFSTAND)
         y = start_y + row * (KAART_LENGTE + KAART_AFSTAND)
         rect = pygame.Rect(x , y  , KAART_BREEDTE , KAART_LENGTE )
         boardcards.append(Card(twelvecards[row * 4 + col], row * 4 + col, rect))
   checksets()
   
def checksets():
   if (len(listofsets(boardcards)))==0:
      replace_found_set(lastset)


def kaartenklikken():
   mouse_pos = event.pos
   for card in boardcards:
      if card.rect.collidepoint(mouse_pos):
         if card.selected:
            card.change_selected()
            border_rect = card.rect.inflate(20, 20) 
            pygame.draw.rect(screen, "pink", border_rect, 20)  
            selected_cards.remove(card)
         elif len(selected_cards) < 3:
            card.change_selected()
            selected_cards.append(card)
   for card in boardcards:
      if card.selected:
         border_rect = card.rect.inflate(20, 20) 
         pygame.draw.rect(screen, "lightgreen", border_rect, 20)  


button_layout_rect = pygame.Rect(575, 20, 100, 50)

def makebutton():
   pygame.draw.rect(screen, "lightgreen", button_layout_rect)  
   font = pygame.font.Font(None, 50)
   text = font.render('SET!', True, "black")  # Tekst op de knop
   screen.blit(text, (button_layout_rect.x + 10, button_layout_rect.y + 10))  # Plaats de tekst


def checkbutton():
   global score_player
   mouse_pos = event.pos 
   if button_layout_rect.collidepoint(mouse_pos) and len(selected_cards)==3:
      if checkforset(selected_cards[0].list, selected_cards[1].list, selected_cards[2].list):
         lastset.clear()
         lastset.append(selected_cards[0].index)
         lastset.append(selected_cards[1].index)
         lastset.append(selected_cards[2].index)
         score_player +=  1
         replace_found_set(lastset)
      else: 
         if score_player > 0 and (lastfail[0] != selected_cards[0].index or lastfail[1] != selected_cards[1].index or lastfail[2] != selected_cards[2].index):
            score_player -= 1
            lastfail.clear()
            lastfail.append(selected_cards[0].index)
            lastfail.append(selected_cards[1].index)
            lastfail.append(selected_cards[2].index)
         global wrong_timer
         wrong_timer = 60
      
def draw_timer():
    global q 
    if timer_running:
        elapsed_time = pygame.time.get_ticks() - start_time  # Bereken de verstreken tijd
        remaining_time = max(0, timer_duration - elapsed_time)  # Zorg ervoor dat de tijd niet negatief wordt
        seconds_left = remaining_time // 1000  # Omrekenen naar seconden
        timer_text = timer_font.render(f'Time: {seconds_left}s', True, "black")
        screen.blit(timer_text, (WINDOW_SIZE[0] - 140, 20))  # Plaats de timer rechtsbovenin
        if remaining_time == 0:
            replace_found_set(firstset(boardcards))
            global score_computer
            score_computer += 1

         




# -------- PYGAME INITIALISATIE --------
pygame.init()
screen = pygame.display.set_mode(WINDOW_SIZE) # Spelscherm maken (en opslaan in een variabele screen)
screen.fill("pink")
pygame.display.set_caption("Vind de SET") # Titel van spelscherm instellen
clock = pygame.time.Clock()# Zorgt voor verversingssnelheid van het scherm



# -------- HOOFDLOOP VAN HET PROGRAMMA --------
for q in range(0, 12):
   twelvecards.append(lijst.pop())
makedeck()


spel_is_afgelopen = False
while not spel_is_afgelopen:
    # --- Check gebeurtenissen (zoals muiskliks enz.) ---
   for event in pygame.event.get():
        if event.type == pygame.QUIT:  # Het kruisje is aangeklikt
            spel_is_afgelopen = True  # Het spel moet eindigen
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:  # Linkermuisknop
            kaartenklikken()
            checkbutton()

    # --- Teken de graphics ---

   if not eind:
      for card in boardcards:
         screen.blit(card.getimage(), card.rect.topleft)
      makebutton()
      pygame.draw.rect(screen, "pink", klok_layout_rect)
      draw_timer()  # Teken de timer op het scherm
      pygame.draw.rect(screen, "pink", score_rect)
      score_text_play = font.render(f'YOUR SCORE: {score_player}', True, "black")
      screen.blit(score_text_play, (20, 20))
      score_text_com = font.render(f'COMPUTER SCORE: {score_computer}', True, "black")
      screen.blit(score_text_com, (20, 60))
      if wrong_timer > 0:
         wrong_timer -= 1
         wrong_text = font.render(f'WRONG SET!', True, "red")
         screen.blit(wrong_text, (100, 100))
   else:
      screen.fill("pink")
      if score_player > score_computer:
         win_text = font.render(f"Gefeliciteerd!", True, "black")
         score_eindtext = font.render(f'Je hebt {score_player} sets gevonden en maar {score_computer} sets misgelopen', True, "black")
         screen.blit(win_text, (500, 250))
         screen.blit(score_eindtext, (200, 300))
      else:
         lose_text = font.render(f"Goed geprobeerd :(", True, "black")
         score_eindtext = font.render(f"Je hebt {score_player} sets gevonden en {score_computer} sets misgelopen", True, "black")
         screen.blit(lose_text, (490, 250))
         screen.blit(score_eindtext, (220, 300))
      time_text = font.render(f"Je hebt er {eindtijd} seconden over gedaan", True, "black")
      screen.blit(time_text, (350, 350))

    # --- Ververs het beeldscherm met de nieuwe graphics ---
   clock.tick(30)  # Ververs scherm met 30 frames per seconde
   pygame.display.flip()  # Ververs het beeldscherm met de bijgewerkte versie



# -------- AFSLUITING --------
pygame.quit() # Sluit het scherm af